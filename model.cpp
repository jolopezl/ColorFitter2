/***
 * Start with https://pybind11.readthedocs.io/en/stable/classes.html
 * and https://pybind11.readthedocs.io/en/stable/advanced/classes.html#overriding-virtual-functions-in-python
 * and https://www.gnu.org/software/gsl/doc/html/index.html
 * and https://inspirehep.net/literature/1791253
 * Compile as:
 * (MacOS) c++ -O3 -Wall -shared -std=c++11 -undefined dynamic_lookup `python3 -m pybind11 --includes` -lgsl -lcblas model.cpp -o model`python3-config --extension-suffix`
 * (Linux1) c++ -O3 -Wall -shared -std=c++11 -fPIC `python3 -m pybind11 --includes` -lgsl -lcblas model.cpp -o model`python3-config --extension-suffix`
 * (Linux2) c++ -O3 -Wall -shared -std=c++11 -fPIC `python3 -m pybind11 --includes` -o model`python3-config --extension-suffix` model.cpp `gsl-config --cflags --libs` -lm 
 * Test
 * python3 -c "import model; m=model.Model()"
***/

#include <gsl/gsl_integration.h>
#include <iostream>

#include <pybind11/pybind11.h>

namespace py = pybind11;

namespace cf2
{
class Model
{
 public:
  Model()
  {
    setGSL();
    std::cout << "Model initialized" << std::endl;
  };
  ~Model() { unsetGSL(); }
  void calculate();
  double density(double z, double x, double y, double c)
  {
    const double r = std::sqrt(x * x + y * y + z * z);
    return 0.170 / (1 + std::exp((r - c) / 0.5));
  };

  void setGSL()
  {
    /*
      Tips & tricks
      https://stackoverflow.com/questions/19450198/calling-gsl-function-inside-a-class-in-a-shared-library
      https://stackoverflow.com/questions/13074756/how-to-avoid-static-member-function-when-using-gsl-with-c
    // gsl_function_pp Fp(std::bind(&Model::densityGSL, &(*this), std::placeholders::_1));
    // F.function = static_cast<gsl_function*>(&Fp);
    */
    w = gsl_integration_workspace_alloc(1000);
    F.function = &Model::densityGSL;
    std::cout << "GSL integration workspace initialized" << std::endl;
  }
  void unsetGSL() { gsl_integration_workspace_free(w); }

  double integral(double x0, double y0, double c, double limlo, double limhi)
  {
    double result, error;
    double params[3] = { x0, y0, c };
    F.params = &params;
    gsl_integration_qag(&F, 0, 100, 0, 1e-7, 1000, GSL_INTEG_GAUSS21, w, &result, &error);
    return result;
  }

 private:
  static double densityGSL(double x, void* params)
  {
    double x0 = ((double*)params)[0];
    double y0 = ((double*)params)[1];
    double rc = ((double*)params)[2];
    double rr = sqrt(x0 * x0 + y0 * y0 + x * x);
    return 0.170 / (1 + exp((rr - rc) / 0.5));
  }
  gsl_integration_workspace* w = nullptr;
  gsl_function F;

  // c-values
  // const std::array<double, 255> rc_values = { 0, 0.41403570800376926, 0.8415285494389906, 1.1143344140766305, 1.3209538023584304, 1.489923624990808, 1.6342860261930716, 1.7611634352821233, 1.8749002836749948, 1.9783555883566586, 2.0735183130905295, 2.16183217939171, 2.2443808983509697, 2.3220003686496806, 2.395350008388296, 2.464959946343503, 2.5312632996991273, 2.5946188849507283, 2.655327591430356, 2.713644438607743, 2.7697876216581534, 2.8239454102311825, 2.876281487715273, 2.9269391383028083, 2.976044569737189, 3.0237095787191235, 3.0700337101009225, 3.115106021782662, 3.159006539257331, 3.201807463521847, 3.2435741812441865, 3.2843661150791648, 3.324237443776035, 3.3632377154692557, 3.401412372759739, 3.438803204500331, 3.4754487363232944, 3.511384569690755, 3.546643677464943, 3.5812566625747175, 3.6152519852168097, 3.6486561631125842, 3.681493948597048, 3.7137884857099257, 3.7455614499611407, 3.776833173033261, 3.807622754344103, 3.837948161110587, 3.8678263183194135, 3.897273189812414, 3.926303851528216, 3.954932557801319, 3.983172801500345, 4.011037368686, 4.03853838838248, 4.065687377981986, 4.092495284738293, 4.118972523750319, 4.14512901278924, 4.170974204281651, 4.196517114725404, 4.221766351783787, 4.246730139276529, 4.271416340262266, 4.295832478386443, 4.319985757650006, 4.343883080738554, 4.36753106603691, 4.390936063441769, 4.414104169073853, 4.437041238981015, 4.459752901915091, 4.4822445712572225, 4.504521456159591, 4.5265885719650445, 4.54845074996069, 4.570112646516284, 4.591578751653905, 4.612853397091243, 4.6339407637972245, 4.654844889095322, 4.675569673347038, 4.696118886245219, 4.716496172744494, 4.736705058653937, 4.756748955914962, 4.776631167585677, 4.796354892551319, 4.815923229978738, 4.83533918353167, 4.854605665362139, 4.873725499892323, 4.892701427399977, 4.911536107419744, 4.930232121971666, 4.948791978627371, 4.96721811342383, 4.9855128936337145, 5.003678620400801, 5.0217175312483935, 5.0396318024680555, 5.057423551395487, 5.075094838580018, 5.0926476698536245, 5.110083998305115, 5.127405726164627, 5.144614706603415, 5.161712745453475, 5.17870160285124, 5.1955829948094685, 5.212358594721038, 5.229030034798176, 5.245598907450512, 5.262066766605056, 5.278435128970995, 5.294705475252166, 5.310879251309767, 5.326957869277718, 5.342942708633085, 5.3588351172236734, 5.374636412254856, 5.390347881237621, 5.405970782899652, 5.421506348061137, 5.436955780477027, 5.452320257647214, 5.467600931596161, 5.482798929623307, 5.497915355025627, 5.5129512877935625, 5.52790778528148, 5.542785882853822, 5.557586594508012, 5.572310913475052, 5.586959812798863, 5.601534245895242, 5.616035147091247, 5.630463432145921, 5.644819998753094, 5.659105727026962, 5.673321479971237, 5.68746810393249, 5.7015464290383076, 5.715557269620924, 5.729501424626898, 5.743379678013336, 5.757192799131274, 5.770941543096657, 5.784626651149445, 5.798248851001242, 5.811808857171967, 5.82530737131594, 5.838745082537758, 5.852122667698412, 5.865440791711964, 5.878700107833135, 5.891901257936155, 5.905044872785204, 5.918131572296703, 5.931161965793811, 5.944136652253375, 5.957056220545592, 5.969921249666669, 5.982732308964726, 5.995489958359142, 6.0081947485536205, 6.0208472212431765, 6.033447909315222, 6.045997337045002, 6.058496020285556, 6.070944466652351, 6.083343175702834, 6.095692639111015, 6.107993340837295, 6.120245757293631, 6.132450357504261, 6.144607603262107, 6.156717949280958, 6.168781843343639, 6.180799726446238, 6.19277203293857, 6.204699190660904, 6.2165816210772, 6.2284197394048615, 6.240213954741155, 6.251964670186402, 6.263672282964017, 6.275337184537552, 6.286959760724717, 6.2985403918086265, 6.310079452646211, 6.321577312773991, 6.333034336511202, 6.344450883060435, 6.355827306605767, 6.367163956408564, 6.378461176900934, 6.389719307776956, 6.400938684081719, 6.412119636298261, 6.423262490432409, 6.434367568095676, 6.445435186586182, 6.4564656589677005, 6.467459294146872, 6.478416396948628, 6.489337268189914, 6.500222204751668, 6.511071499649226, 6.521885442101099, 6.532664317596208, 6.543408407959611, 6.55411799141679, 6.564793342656454, 6.575434732892007, 6.586042429921646, 6.596616698187141, 6.607157798831332, 6.6176659897544035, 6.628141525668897, 6.638584658153589, 6.648995635706194, 6.659374703794944, 6.66972210490908, 6.6800380786082965, 6.690322861571097, 6.700576687642195, 6.710799787878891, 6.7209923905965105, 6.731154721412888, 6.741287003291941, 6.751389456586377, 6.761462299079479, 6.771505746026095, 6.781520010192772, 6.791505301897097, 6.80146182904623, 6.81138979717471, 6.821289409481454, 6.831160866866072, 6.841004367964444, 6.8508201091836085, 6.860608284735964, 6.870369086672824, 6.880102704917282, 6.889809327296487, 6.899489139573279, 6.909142325477218, 6.918769066735028, 6.928369543100458, 6.937943932383601, 6.947492410479616, 6.957015151396957, 6.966512327285054, 6.975984108461481 };
  // double get_c_value(const int& xc) const { return rc_values[xc]; }
};
} // namespace cf2

PYBIND11_MODULE(model, m)
{
  py::class_<cf2::Model>(m, "Model")
    .def(py::init<>())
    .def("density", &cf2::Model::density, "Nuclear density", py::arg("z"), py::arg("x"), py::arg("y"), py::arg("c"))
    .def("integral", &cf2::Model::integral, "GSL integration of nuclear density", py::arg("x0"), py::arg("y0"), py::arg("c"), py::arg("limlo"), py::arg("limhi"));
}
